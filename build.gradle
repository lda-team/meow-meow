plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.example.demo'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

repositories {
	mavenCentral()
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-log4j2')
	implementation('org.owasp.encoder:encoder:1.2.3')
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.postgresql:postgresql:42.6.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'junit:junit'
}

jacoco {
	toolVersion = "0.8.6"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestCoverageVerification // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [''])
		}))
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [''])
		}))
	}
	violationRules {
		rule {
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.7
			}
		}
	}
}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}


publishing {
	publications {
		bootJava(MavenPublication) {
			artifact bootJar
		}
	}

	repositories {
		maven {}
	}
}

